#include <chrono>
#include <iostream>
#include <sstream> // Include sstream for std::ostringstream


template<typename T>
void format(std::ostringstream& oss, const T& value) {
    oss << value;  // For the base case, just append the value to the stream
}

template<typename T, typename... Args>
void format(std::ostringstream& oss, const T& value, const Args&... args) {
    oss << value << " ";  // Add value to the stream with a space
    format(oss, args...);  // Recurse with the remaining arguments
}

void logNonVariadic(const std::string& msg) {
    std::cout << msg << std::endl;
}

template<typename... Args>
void logVariadic(const Args&... args) {
    std::ostringstream oss; // Declare the ostringstream object here
    format(oss, args...); // Call the format function to format the message
    std::cout << oss.str() << std::endl;
}



int main() {
    const int iterations = 100000;

    // Measure Non-Variadic Performance
    auto start = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < iterations; ++i) {
        logNonVariadic("Logging iteration " + std::to_string(i)); // Use string concatenation with iteration
    }
    auto end = std::chrono::high_resolution_clock::now();
    auto durationNonVariadic = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();

    // Measure Variadic Performance
    start = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < iterations; ++i) {
        logVariadic("Logging iteration", i); // Use variadic logging with message and iteration
    }
    end = std::chrono::high_resolution_clock::now();
    auto durationVariadic = std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count();

    std::cout << "Non-Variadic Duration: " << durationNonVariadic << " ms" << std::endl;
    std::cout << "Variadic Duration: " << durationVariadic << " ms" << std::endl;

    return 0;
}
